<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>永不言败的部落阁</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-01-12T16:44:42.954Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>永不言败</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>像我这样的人</title>
    <link href="http://yoursite.com/2019/01/12/%E5%83%8F%E6%88%91%E8%BF%99%E6%A0%B7%E7%9A%84%E4%BA%BA/"/>
    <id>http://yoursite.com/2019/01/12/像我这样的人/</id>
    <published>2019-01-12T13:21:49.000Z</published>
    <updated>2019-01-12T16:44:42.954Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2019/01/12/像我这样的人/./xwzydr03.jpeg" alt="what‘s this"><br>　　<br>  一个人的时候，总会单曲循环一首毛不易的《像我这样的人》，听很久都不会觉得腻，不仅仅是因为唱得好，相反，给我感觉这首歌最大的魅力就是能产生共鸣。　</p><h6 id="比如："><a href="#比如：" class="headerlink" title="比如："></a>比如：</h6><p>　　　　　　　　　　　 <strong>==“像我这样优秀的人<br>　　　　　　　　　　　　本该灿烂过一生<br>　　　　　　　　　　　　怎么二十多年到头来<br>　　　　　　　　　　　　还在人海里浮沉”。。。。。。==</strong></p><p>　　<strong>听</strong>歌的时候，总会回想起自己的这三十多年，心中是无限感慨~~</p><p>　　学生时代的自己，是无知而且快乐的，因为没有学习压力，那时候对自己的将来就没有一点点的想法，每天上学放学，轻松应对。我们上学那会儿，还不是很提倡大家上高中，我们每个人的希望，都是能通过自己的努力，考上一所心仪的小中专，然后顺利学习，毕业，分配工作，感觉自己的人生已经被规划了。</p><p>　　说点不自谦的话，初中时候写作文，运气好，将自己的情绪酝酿和挥洒在字里行间，经常被语文老师选中当做范文，然后我会站在讲台上跟同学们分享，每每参加学校的什么作文比赛，也觉得是文思泉涌，提笔就来，这一切都得益于那时候非常大的阅读量。也就是那个时候，我特别羡慕饮酒作诗的李白，所有的爱恨情仇都可以在诗里表达的隐晦而自由，洒脱而豪迈。于是，在我自己的文字里，也经常会有自己的另一种故事，只是他人看不穿，也看不懂，所以会觉得那是一幅属于我自己的画，抽象的画。我想，那时候，或许也是自恋吧。</p><p>　　曾经也会有许多种想法，想要毕业后上高中，考入某某大学，当然那时候只是觉得上大学肯定很好，并没想到上大学以后工作了会怎么样。也想要学习李白，对酒当歌人生几何，想着也许会阳光明媚，妻儿陪伴，顺顺利利的走过这一生，可惜，那时候年轻到连想法都天马行空。这一辈子太久了，久到80集的电视连续剧都播放不完，又怎么做到像李白一样满腹经纶，又怎么能经历许多，而后看透所有的爱情。所以，这30多年以来，我还是依然在车水马龙，人潮拥挤的城市里浮浮沉沉。<br>　　<br>　　初中毕业，连滚带爬上了卫校，我都不知道我是怎么会报了卫校。到现在也还是不太懂那时候的想法（PS：因为小时候受过伤的缘故，比较胆小，更怕黑）。接触了一个新的学科，新的知识，新的同学。四年间，我感觉自己始终处在一个迷茫状态，不知道怎么去学习，交往，将自己封闭在一个孤独的世界里，那时候，陪伴我最多的就是金庸、古龙这些大侠，零点、Beyond这些偶像还有星际、CS等这些带我走入计算机之门的游戏。他们陪我度过了最快乐的四年时光……让我在这四年中不再孤独，不再寂寞，不在缺少欢乐。<br>　　<br>　　偶尔跟几个同学聚会，大家在饭桌上讨论起现在的职业时，其中一位男同学满脸的自豪和看透一切的表情让我对他印象深刻。无论在他侃侃而谈的背后是怎样的一种辛酸和付出，但至少在谈天说地的时候，他带给我们的是满满的正能量，是成功的喜悦。这种能量无关于年薪是几十万还是十几万甚至是几万，这种心境也是用金钱无法衡量的。也许是活的比较老成，我在一边露出了微微的笑容，生活不就是如此的吗？你不对它笑的时候，它不对你笑。你对它笑的时候，也许它对你还是不会笑。但，那又怎样？所谓的灿烂的过一生不就是自己的心安吗？</p><p>　　以前，在初出茅庐的时候，我们缺少经验，我们只能用没日没夜的加班和不断刻苦的学习来证明自己，通过这种方式获得领导的鼓励和各种荣誉证书来证明自己曾经优秀过。</p><p>　　现在，在人海里中浮浮沉沉之后，在看透情感，看穿人心之后，通过自己多年的努力，得到一些成就，再去拥有灿烂的人生不是更踏实么。</p><p>　　　　　　　　　　　　<strong>==“像我这样聪明的人<br>　　　　　　　　　　　　早就告别了单纯<br>　　　　　　　　　　　　怎么还是用了一段情<br>　　　　　　　　　　　　去换一身伤痕”==</strong></p><p>　　在现在回想起来，单纯，这似乎只属于还是个孩子的时候。比方说看到孩子脸上的喜怒哀乐，听到他开心的告诉我：爸爸，我觉得我们班上的XX小朋友喜欢我！这就是单纯，都简单到没有任何的修饰。</p><p>　　上学那会儿总听过来人说：还是上学好啊，无忧无虑的，你们一定要好好学习。听到这话的时候，我们拼命想要从学校这座“牢笼”里挣脱出来，我们想要像大人一样有自由支配的时间，想做什么做什么，想多晚睡都没人念叨，不写作业也不会挨批评。可是，现在的我经常会对身边刚毕业或者参加工作的孩子说：我这辈子最大的遗憾就是没有体验过大学生活。曾经被指导的我们，现在却变成了说这句话的人，却变成了羡慕学生这个职业的他们了。</p><p>　　当你去面对身边的一切的时候，一段用心对待却无果而终的爱情也许会让你一夜长大。一份一人要面对许多人的协调工作或者一人要接受的多个工作，也许就会让你看穿每个善良面孔背后不为人知的表现力，这种表现力潜移默化的宣布着主权，会让你懊恼为什么自己已经很聪明了却依然走进了别人的圈套。这种表现力风平浪静的侵蚀着你的成果，会让你懊恼为什么有的时候选择会大于努力，自己那么的辛苦，而鲜花和掌声于别人而言，为什么来的那么容易。</p><p>　　所以，成年人的世界里，没有了单纯，因为太单纯，换来的最终是一身伤痕。别去否定，因为我们每个人都在遗忘单纯。</p><p>　　　　　　　　　　　　<strong>==“像我这样庸俗的人<br>　　　　　　　　　　　　从不喜欢装深沉<br>　　　　　　　　　　　　怎么偶尔听到老歌时<br>　　　　　　　　　　　　忽然也晃了神”==</strong></p><p>　　</p><blockquote><p> “我们本就是凡夫俗子，会吃喝拉撒，会犯错，会动感情，会难过。所以，不管我们赢得了多少掌声，受到了多少尊重，在夜晚褪去光环的时候，我们都是一个嘴巴两只眼睛的凡人”。</p></blockquote><p>　　我喜欢在心情低落的时候听悲伤的旋律，然后不言不语盯着电脑屏幕发呆，难过的时候，我喜欢独处，一言不发的感受空气里心跳的声音，偶尔也会黯然神伤。放空的时候，我听老歌，老情歌，每一次听都会感叹岁月带给我们的获得和失去，会让人陷入一种虚无的境地，会怀念当时听那首歌时的情景，只不过时过境迁，再也没有当年的时光了。</p><p>　　怀念曾经没有什么不好，你会笑话曾经懵懂傻傻的自己，也会学着和过去不美好的事情说再见。回头看，总会看到不一样的自己，那是因为现在的自己，已经越来越好。</p><p>　　　　　　　　　　　　<strong>==“像我这样懦弱的人<br>　　　　　　　　　　　　凡事都要留几分<br>　　　　　　　　　　　　怎么曾经也会为了谁<br>　　　　　　　　　　　　想过奋不顾身”==</strong></p><p>　　一提到懦弱，总会想起一个没有主见的男人，一个没有担当的男人，一个没有精神主张的男人，好像就是这种形象的男人，我们称之为“懦弱”。其实，不仅如此。</p><p>　  生活，有时候就是你百口莫辩的懦弱，辩解过多成了借口，它的存在会让你学习善良的背后是碌碌无为的度过一生。生活，有时候也是你欲言又止的解释，解释过多成了误会，它的存在会让你明白不说不问不念的背后是被误解之后说不清道不明的缠绵悱恻。于是，在百口莫辩和欲言又止的诱导下，你失去了奋不顾身的力气，你失去了辩白自己的勇气，你失去了展现自我的豪气，于是你继续迷茫，继续年复一年，日复一日的活着，只是活着。</p><p>　　正如这首歌的副歌部分：==“<strong>像我这样迷茫的人，像我这样寻找的人，像我这样碌碌无为的人，像我这样孤单的人，像我这样傻的人，像我这样不甘平凡的人，世界上有多少人？</strong>”==</p><p>　　后来，我们会觉得自己是那个迷茫的人，是那个寻找的人，是那个碌碌无为的人，是那个孤单的，傻的，又不甘平凡的人。</p><p>　　那你又是哪一个人呢？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2019/01/12/像我这样的人/./xwzydr03.jpeg&quot; alt=&quot;what‘s this&quot;&gt;&lt;br&gt;　　&lt;br&gt;  一个人的时候，总会单曲循环一首毛不易的《像我这样的人》，听很久都不会觉得腻，不仅仅是因为唱得好，相反，给我感觉这首歌最大的
      
    
    </summary>
    
      <category term="心路历程" scheme="http://yoursite.com/categories/%E5%BF%83%E8%B7%AF%E5%8E%86%E7%A8%8B/"/>
    
    
      <category term="像我这样的人" scheme="http://yoursite.com/tags/%E5%83%8F%E6%88%91%E8%BF%99%E6%A0%B7%E7%9A%84%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>计算机基础知识</title>
    <link href="http://yoursite.com/2019/01/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://yoursite.com/2019/01/03/计算机基础知识/</id>
    <published>2019-01-03T03:02:32.000Z</published>
    <updated>2019-01-03T03:51:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>计算机网络的知识与我们的生活息息相关，对于每一个开发者来说更是十分重要，深入理解它，将有助于我们在实际工作中迅速解决相关问题。本篇就计算机网络的基本知识进行概要性总结。</p><ul><li><a href="#一-计算机网络常识">一、计算机网络常识</a><ul><li><a href="#1理解网络节点">1.理解网络节点</a></li><li><a href="#2理解网络交换">2.理解网络交换</a></li><li><a href="#3理解网络拓扑结构">3.理解网络拓扑结构</a></li><li><a href="#4衡量计算机网络的主要指标">4.衡量计算机网络的主要指标</a></li></ul></li><li><a href="#二-网络参考模型osi与tcpip">二、网络参考模型OSI与TCP/IP</a><ul><li><a href="#1osi七层模型">1.OSI七层模型</a></li><li><a href="#2tcpip四层模型">2.TCP/IP四层模型</a></li><li><a href="#3总结osi参考模型与tcpip模型的异同">3.总结：OSI参考模型与TCP/IP模型的异同</a></li></ul></li><li><a href="#三-理解数据封装过程">三、理解数据封装过程</a></li><li><a href="#四-三次握手与四次挥手">四、三次握手与四次挥手</a><ul><li><a href="#1理解三次握手">1.理解三次握手</a></li><li><a href="#2四次挥手">2.四次挥手</a></li><li><a href="#3三次握手-四次挥手的原因">3.三次握手、四次挥手的原因</a></li></ul></li><li><a href="#五-ipv4地址详解">五、IPv4地址详解</a><ul><li><a href="#1ip包头结构">1.IP包头结构</a></li><li><a href="#2ip地址分类">2.IP地址分类</a></li><li><a href="#3了解ipv6地址">3.了解IPv6地址</a></li></ul></li><li><a href="#六-子网掩码">六、子网掩码</a><ul><li><a href="#1子网掩码分类">1.子网掩码分类</a></li></ul></li><li><a href="#七-传输层端口">七、传输层端口</a><ul><li><a href="#1端口的作用">1.端口的作用</a></li><li><a href="#2常见的端口号">2.常见的端口号</a></li><li><a href="#3查看端口">3.查看端口</a></li></ul></li><li><a href="#八-tcp与udp协议">八、TCP与UDP协议</a><ul><li><a href="#1tcp协议transmission-control-protocol">1.TCP协议(Transmission Control Protocol)</a></li><li><a href="#2udp协议">2.UDP协议</a></li></ul></li><li><a href="#九-dns域名系统">九、DNS域名系统</a><ul><li><a href="#1ip地址到主机名的映射有两种方式">1.IP地址到主机名的映射有两种方式：</a></li><li><a href="#2dns服务器的原理">2.DNS服务器的原理</a></li><li><a href="#3域名空间结构完全合格域名">3.域名空间结构(完全合格域名)</a></li><li><a href="#4dns查询过程">4.DNS查询过程</a></li></ul></li><li><a href="#十-网关gateway">十、网关(Gateway)</a></li><li><a href="#总结">总结</a></li></ul><h1 id="一、计算机网络常识"><a href="#一、计算机网络常识" class="headerlink" title="一、计算机网络常识"></a><strong>一、计算机网络常识</strong></h1><p>计算机网络指将地理位置不同的多台计算机及其外部设备，通过通信线路连接起来，在网络操作系统及网络通信协议的管理和协调下，实现资源共享和信息传递的计算机系统。<br>根据不同的方式，计算机网络可以分类如下：<br><img src="/2019/01/03/计算机基础知识/./001.png" alt="enter description here"></p><h2 id="1-理解网络节点"><a href="#1-理解网络节点" class="headerlink" title="1.理解网络节点"></a>1.理解网络节点</h2><p>局域网(LAN)：局域网是一种在小区域内使用的，由多台计算机组成的网络，覆盖范围通常局限在10 千米范围之内，属于一个单位或部门组建的小范围网。</p><p>城域网(MAN)：城域网是作用范围在广域网与局域网之间的网络，其网络覆盖范围通常可以延伸到整个城市，借助通信光纤将多个局域网联通公用城市网络形成大型网络，使得不仅局域网内的资源可以共享，局域网之间的资源也可以共享。</p><p>广域网(WAN)： 广城网是一种远程网，涉及长距离的通信，覆盖范围可以是个国家或多个国家，甚至整个世界。由于广域网地理上的距离可以超过几千千米，所以信息衰减非常严重，这种网络一般要租用专线，通过接口信息处理协议和线路连接起来，构成网状结构，解决寻径问题。</p><h2 id="2-理解网络交换"><a href="#2-理解网络交换" class="headerlink" title="2.理解网络交换"></a>2.理解网络交换</h2><p>线路交换：<br>线路交换是相对于分组交换的一个概念。电路交换要求在通信前首先建立连接通道，这个连接通道用于双方通信，并且一直维持到双方通信结束。整个通信过程始终占用通道、带宽、码字等资源。<br>优点：数据传输可靠、有序；<br>缺点：带宽固定，沿着一条链路通信，网络资源利用低，初始化连接建立慢；</p><p>报文交换：<br>报文交换是分组交换的前身，它的原理是：存储接收到的报文，判断其目标地址以选择路由，最后，在下一路由空闲时，将数据转发给下一路由。<br>优点：高效、灵活、迅速、可靠；<br>缺点：延时时间长且不定，通信不可靠，不适合计算机网络；</p><p>分组交换：<br>分组交换是将资料组合成适当大小的区块，称为封包，再通过网络来传输。这个传送封包的网络是共享的，每个单位都可以独立把封包再传送出去，而且配置自己需要的资源。<br>优点：多路复用，网络利用率高，<br>缺点：延迟大，实时性差，设备功能复杂</p><h2 id="3-理解网络拓扑结构"><a href="#3-理解网络拓扑结构" class="headerlink" title="3.理解网络拓扑结构"></a>3.理解网络拓扑结构</h2><p>计算机网络拓扑(Computer Network Topology)是指由计算机组成的网络，其中设备的分布情况以及连接状态，把它们画在图上就成了拓朴图，常见的拓扑结构如下：<br><img src="/2019/01/03/计算机基础知识/./002.jpg" alt="enter description here"></p><p>总线型：<br>优点：成本低，易于扩展；<br>缺点：可靠性不高，维护困难，传输效率低；<br>总线两端需要安装终端器或者接地。不然电信号传递到总线两端，由于介质不同，电信号反方向反弹就会造成网络不稳定。<br>星型：<br>优点：易于扩展；<br>缺点：线路利用率低；<br>星型拓扑最常见的应用场景就是交换机<br>树型：<br>优点：易于扩展；方便从某一个分支节点隔离故障；<br>缺点：节点对于根的依赖太大，若根发生故障，则全网不能工作；类似于星型拓扑结构<br>环形网络：<br>优点：成本低；<br>缺点：维护困难，如果环状网络上设备较多，会造成延迟；<br>全网状和部分网状：<br>优点：可靠性高，易于扩充，组网灵活；由于存在冗余线，其中一条网络断开，还有备用网络来实现通信；<br>缺点：成本高，结构复杂，维护困难<br>注意：生活中的计算机连接方式是将上面两种或多种共同使用，这样的方式称混合式拓扑结构。</p><h2 id="4-衡量计算机网络的主要指标"><a href="#4-衡量计算机网络的主要指标" class="headerlink" title="4.衡量计算机网络的主要指标"></a>4.衡量计算机网络的主要指标</h2><p><strong>速率：</strong><br>速率是指计算机网络中的主机在数字信道上，单位时间内从一端传送到另一端的数据量，即数据传输率，也称数据率或比特率。比特(bit)是数据量的最小单位，s(秒)是时间单位。速率的单位是bit/s，类似的有kb/s(k=10^3)、Mb/s(M=10^6)、Gb/s(G=10^9)、Tb/s(T=10^12)；<br>另外，字节(Byte)也是用于计量存储容量的一种计量单位，1个字节等于8个比特，即：1Byte=8bit 1B=8b 1B/s=8b/s(或1Bps=8bps)</p><p><strong>带宽(bandWidth)：</strong><br>====带宽是计算机网络中的主机在数字信道上，单位时间内从一端传送到另一端的最大数据量，即最大速率。====<br>在实际上网应用中，我们接入宽带网络时，速率却相差甚远，这主要是因为ISP提供的线路带宽使用的单位是比特，而一般下载软件显示的是字节（1字节=8比特），所以要通过换算，才能得实际值。</p><p>我们以1M宽带为例，按照换算公式换算一下：1Mb/s=1000Kb/s=1000/8KB/s=125KB/s。而且，网络数据传输还要受到温度和传输环境的影响，导致电信号减弱，所以真实情况下，1M宽带的真实网速度比125KB/s还要小些。</p><h1 id="二、网络参考模型OSI与TCP-IP"><a href="#二、网络参考模型OSI与TCP-IP" class="headerlink" title="二、网络参考模型OSI与TCP/IP"></a><strong>二、网络参考模型OSI与TCP/IP</strong></h1><h2 id="1-OSI七层模型"><a href="#1-OSI七层模型" class="headerlink" title="1.OSI七层模型"></a>1.OSI七层模型</h2><p>开放系统互联参考模型(Open System Interconnect)，简称OSI参考模型。其目的是为异种计算机互连提供一个共同的基础和标准框架，并为保持相关标准的一致性和兼容性提供共同的参考。OSI参考模型的分层示意图如下：</p><p><img src="/2019/01/03/计算机基础知识/./003.png" alt="enter description here"></p><p>总结OSI参考模型的特点：<br>1.只是定义一种抽象结构，而并非具体实现的描述；<br>2.最上层应用层最接近用户，最下层物理层最接近实际的数据传递；<br>3.上三层用于为用户提供服务，下四层用于为实际数据传递提供服务；<br>下面是对于OSI七层模型的更为具体解释：<br><img src="/2019/01/03/计算机基础知识/./004.png" alt="enter description here"></p><h2 id="2-TCP-IP四层模型"><a href="#2-TCP-IP四层模型" class="headerlink" title="2.TCP/IP四层模型"></a>2.TCP/IP四层模型</h2><p>OSI七层参考模型是理论上的网络通信模型，而我们在实际的互联网络中使用的是TCP/IP四层模型，它们的对应关系如下：<br><img src="/2019/01/03/计算机基础知识/./005.png" alt="enter description here"></p><p>网络接口层：<br>网络接口层与OSI参考模型中的物理层和数据链路层相对应；它负责监视数据在主机和网络之间的交换。事实上，TCP/IP本身并未定义该层的协议，而由参加互联的各个网络使用自己的的物理层和数据链路层协议，然后与TCP/IP的网络接入层进行连接。地址解析协议(ARP)工作在此层，即OSI参考模型的数据链路层。</p><p>网际互联层： </p><ul><li>网际互联层对应OSI参考模型的网络层； </li><li>主要解决主机到主机的通信问题，它所包含的协议涉及数据包在整个网络上的逻辑传输。 </li><li>该层有三个重要的协议：网际协议(IP)、互联网组管协议(IGMP)和互联网控制报文协议(ICMP)。</li></ul><p>传输层： </p><ul><li>传输层对应OSI参考模型的传输层； </li><li>为应用层实体提供端对端的通信功能更，保证了数据包的顺序传送及数据的完整性。 </li><li>该层定义了两个主要的协议：传输控制协议(TCP)和用户数据包协议(UDP)。</li></ul><p>应用层：<br>应用层对应OSI参考模型的应用层；为用户提供所需要的各种服务，例如：FTP、Telent、DNS、SMTP等。</p><h2 id="3-总结：OSI参考模型与TCP-IP模型的异同"><a href="#3-总结：OSI参考模型与TCP-IP模型的异同" class="headerlink" title="3.总结：OSI参考模型与TCP/IP模型的异同"></a>3.总结：OSI参考模型与TCP/IP模型的异同</h2><p>相同点：<br>1.OSI参考模型和TCP/IP参考模型都采用了层次结构概念；<br>2.都能够提供面向连接和无连接的的两种通信服务机制；<br>不同点：<br>1.可靠性要求不同，后者更高；<br>2.OSI模型是在协议开发之前设计的，具有通用性；TCP/IP协议是先有协议后建立的模型，不适用于非TCP/IP网络；</p><h1 id="三、理解数据封装过程"><a href="#三、理解数据封装过程" class="headerlink" title="三、理解数据封装过程"></a><strong>三、理解数据封装过程</strong></h1><p>网络参考模型清晰的描述了网络中数据的传输过程，其中的每层都负责与其他机器的对等层进行通信，这也涉及到了数据的封装问题。现在，我们可以通过一个实例来具体分析数据封装的过程：</p><p><img src="/2019/01/03/计算机基础知识/./006.png" alt="enter description here"></p><p>FTP服务器向员工主机发送数据分为两个阶段：FTP服务器发送数据、员工主机接收数据<br>FTP服务器发送数据：<br>1.应用层将数据(目标文件)传递给传输层，传输层为其添加TCP头部和端口信息，此时数据单元被称为段；<br>2.传输层将数据段传递给网络层，网络层再次封装添加IP头部，此时数据单元被称为包；<br>3.数据链路层接收网络层包，继续封装为其添加Mac头部和尾部，此时数据单元被称为帧；<br>4.物理层将接收到的数据转化为比特流，在网络中传送；</p><p>员工主机接收数据：<br>员工主机接收数据的过程与FTP服务器发送数据过程相反，刚好是逐层的解封装操作，最终在其应用层，用户可以得到目标文件数据；</p><h1 id="四、三次握手与四次挥手"><a href="#四、三次握手与四次挥手" class="headerlink" title="四、三次握手与四次挥手"></a><strong>四、三次握手与四次挥手</strong></h1><p>在TCP/IP协议中，TCP协议用于提供可靠的连接服务，这其中涉及到了三次握手与四次挥手过程，现在对它们进行具体的分析。</p><h2 id="1-理解三次握手"><a href="#1-理解三次握手" class="headerlink" title="1.理解三次握手"></a>1.理解三次握手</h2><p>三次握手是为了建立一个可靠的连接，此过程可参考下图：</p><p><img src="/2019/01/03/计算机基础知识/./007.png" alt="enter description here"></p><p>第一次握手：<br>建立连接时，客户端发送SYN包（syn=x）到服务器，并进入SYN_SENT状态，等待服务器确认；<br>SYN：同步序列编号（Synchronize Sequence Numbers）。</p><p>第二次握手：<br>服务器收到SYN包，必须确认客户的SYN(ACK=x+1）,同时自己也发送一个SYN包（syn=y）,即SYN+ACK包,此时服务器进入SYN_RECV状态；<br>ACK：确认字符(Acknowledgement)，在数据通信中，接收站发给发送站的一种传输类控制字符。表示发来的数据已确认接收无误。</p><p>第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=y+1），此包发送完毕，客户端和服务器进入ESTABLISHED（TCP连接成功）状态。</p><p>完成三次握手后，客户端与服务器开始传送数据。</p><h2 id="2-四次挥手"><a href="#2-四次挥手" class="headerlink" title="2.四次挥手"></a>2.四次挥手</h2><p>四次挥手用于终止TCP连接，断开一个TCP连接需要客户端和服务端总共发送4个包，以确认连接的断开。此过程可参考下图：</p><p><img src="/2019/01/03/计算机基础知识/./008.png" alt="enter description here"></p><p>“由于TCP连接是全双工的，因此每个方向都必须单独进行关闭。这原则是当一方完成它的数据发送任务后就能发送一个FIN来终止这个方向的连接。收到一个 FIN只意味着这一方向上没有数据流动，一个TCP连接在收到一个FIN后仍能发送数据。首先进行关闭的一方将执行主动关闭，而另一方执行被动关闭。” ——摘自百度</p><p>第一次挥手：<br>客户端发送一个FIN，用来关闭客户到服务器的数据传送，并进入FIN_WAIT_1状态。</p><p>第二次挥手：<br>服务器收到客服端的FIN，发回一个ACK，确认序号为收到的序号加1。和SYN一样，一个FIN将占用一个序号。<br>服务器段进入CLOSE_WAIT状态。</p><p>第三次挥手：<br>服务器发送一个FIN，用来关闭服务器到客户端的数据传递，服务器端进入LAST_ACK状态。</p><p>第四次挥手：<br>客户端收到服务器的FIN后，进入进入TIME_WAIT状态；<br>客户端发送一个ACK给服务器，确认序号为收到序号+1，Server进入CLOSED状态，完成四次挥手。</p><p>特别注意：上述是客户端主动关闭，服务器端被动关闭的情况，实际中还可能出现双方同时发起关闭的情况，具体的流程可参考下图：</p><p><img src="/2019/01/03/计算机基础知识/./009.png" alt="enter description here"></p><h2 id="3-三次握手、四次挥手的原因"><a href="#3-三次握手、四次挥手的原因" class="headerlink" title="3.三次握手、四次挥手的原因"></a>3.三次握手、四次挥手的原因</h2><p>为什么建立连接协议是三次握手，而关闭连接却是四次挥手呢？<br>对于建立连接的过程，服务器端在接收到客户端SYN请求报文后，可以把ACK和SYN(ACK起应答用，而SYN起同步作用)在一个报文里来发送。</p><p>而对于关闭连接的过程，当服务器端收到客户端的FIN报文时，它仅仅表示客户端不再发送数据了，但未必服务器端所有的数据全部发送给客户端了。所以，此时的服务器端可以立即关闭，也可以继续发送一些数据给客户端之后，再发送FIN报文给客户端，来表示同意关闭连接。因此断开连接，服务器端的ACK报文和FIN报文多数情况下都是分开发送的。</p><h1 id="五、IPv4地址详解"><a href="#五、IPv4地址详解" class="headerlink" title="五、IPv4地址详解"></a><strong>五、IPv4地址详解</strong></h1><p>IP地址为互联网上的每一个网络和每一台主机分配一个逻辑地址，用于实现通信。我们目前正在大量使用的是IPv4(IP协议的第四版)。</p><h2 id="1-IP包头结构"><a href="#1-IP包头结构" class="headerlink" title="1.IP包头结构"></a>1.IP包头结构</h2><p>在讲到数据封装过程时，我们看到网络层添加了IP包头，其详细结构如下：<br>注：字段后面括号里的数字是指该字段在IP数据包头信息中所占的位(bit)数；</p><p><img src="/2019/01/03/计算机基础知识/./010.png" alt="enter description here"></p><p>上述是IP包头的结构，我们会看到IP包头中有待选加入的字段，所以IP包头不一定就是20个字节，IPV4在解包检测时需要判断包头的长度，比较浪费时间，这也是它比IPV6慢的原因。</p><h2 id="2-IP地址分类"><a href="#2-IP地址分类" class="headerlink" title="2.IP地址分类"></a>2.IP地址分类</h2><p>最初设计互联网络时，为了便于寻址及层次化构造网络，每个IP地址包括两个标识码ID，即网络ID和主机ID。同一个物理网络上的所有主机都使用同一个网络ID，网络上的一个主机(包括网络上工作站，服务器和路由器等)有一个主机ID与其对应。<br>IP地址根据网络ID的不同分为5种类型，A类地址、B类地址、C类地址、D类地址和E类地址，其中D和E为特殊地址，不对用户开放使用，分类的具体情况如下：</p><p><img src="/2019/01/03/计算机基础知识/./011.png" alt="enter description here"></p><p>我们真正用到的是A、B、C类IP地址，关于它们的详细信息如下：</p><p><img src="/2019/01/03/计算机基础知识/./012.png" alt="enter description here"></p><p>A类地址：<br>1.前8位(一个字节)为网络ID，剩下24位(三个字节)为主机ID；<br>2.网络地址的最高位必须是0<br>3.A类地址数量少，有126个网络，每个网络可容纳主机：256的3次方-2=16777214台。</p><p>B类地址：<br>1.前16位为网络ID，剩下16位为主机ID；<br>2.网络地址的最高位必须是10<br>3.B类地址有16384个网络，每个网络可容纳主机：256的2次方-2=65534台。</p><p>C类地址：<br>1.前24位为网络ID，剩下8位为主机ID；<br>2.网络地址的最高位必须是110<br>3.B类地址有209万余个网络，每个网络可容纳主机：256-2=254台。</p><h2 id="3-了解IPv6地址"><a href="#3-了解IPv6地址" class="headerlink" title="3.了解IPv6地址"></a>3.了解IPv6地址</h2><p>IPv6是下一版本的互联网协议，它的提出最早是为了解决IPv4地址空间被耗尽的问题；与IPv4相比，IPv6主要有以下的优势： </p><ul><li>扩大了地址空间，IPv6采用128位(16个字节)地址长度；按保守方法估算IPv6实际可分配的地址，整个地球的每平方米面积上仍可分配1000多个地址； </li><li>提高了网络的整体吞吐量； </li><li>改善整个服务质量(Qos)； </li><li>提高安全性； </li><li>支持即插即用和移动性；</li></ul><h1 id="六、子网掩码"><a href="#六、子网掩码" class="headerlink" title="六、子网掩码"></a><strong>六、子网掩码</strong></h1><p>IP地址在设计时就考虑到地址分配的层次特点，将每个IP地址都分割成网络号和主机号两部分，以便于IP地址的寻址操作。但IP地址的网络号和主机号各是多少位呢？如果不指定，就不知道哪些位是网络号、哪些是主机号，这就需要通过子网掩码来实现。</p><p>将子网掩码作为一个32位地址，和IP地址结合使用，我们可以屏蔽IP地址的一部分以区别网络号和主机号，并说明该IP地址是在局域网上，还是在远程网上；也可以将一个大的IP网络划分为若干小的子网络；</p><p>对于A类地址来说，默认的子网掩码是255.0.0.0；对于B类地址来说默认的子网掩码是255.255.0.0；对于C类地址来说默认的子网掩码是255.255.255.0。</p><h2 id="1-子网掩码分类"><a href="#1-子网掩码分类" class="headerlink" title="1.子网掩码分类"></a>1.子网掩码分类</h2><p>子网掩码一共分为两类。一类是缺省子网掩码，一类是自定义子网掩码。缺省子网掩码即未划分子网，对应的网络号的位都置1，主机号都置0。<br>A类网络缺省子网掩码：255.0.0.0<br>B类网络缺省子网掩码：255.255.0.0<br>C类网络缺省子网掩码：255.255.255.0<br>自定义子网掩码是将一个网络划分为几个子网，需要每一段使用不同的网络号或子网号，实际上我们可以认为是将主机号分为两个部分：子网号、子网主机号。形式如下：<br>未做子网划分的ip地址：网络号 + 主机号<br>做子网划分后的ip地址：网络号 + 子网号 + 子网主机号</p><p>下面演示了子网掩码具体用法：一个B类的IP地址，为其配置一个C类标准子网掩码，可实现划分子网，操作效果如下：</p><p><img src="/2019/01/03/计算机基础知识/./01.png" alt="enter description here"></p><p><strong>总结:</strong></p><p>将IP地址与子网掩码做与运算得到当前网络地址；<br>将IP地址中与子网掩码相对应的为0的部分全部换成1就得到当前网络的广播地址；</p><h1 id="七、传输层端口"><a href="#七、传输层端口" class="headerlink" title="七、传输层端口"></a><strong>七、传输层端口</strong></h1><h2 id="1-端口的作用"><a href="#1-端口的作用" class="headerlink" title="1.端口的作用"></a>1.端口的作用</h2><p>我们已经知道，一台拥有IP地址的主机可以提供许多服务，比如Web服务、FTP服务、SMTP服务等，这些服务完全可以通过1个IP地址来实现。但是，主机是怎样区分不同的网络服务呢？显然不能只靠IP地址，因为IP地址与网络服务的关系是一对多的关系。这实际上是通过“IP地址+端口号”来区分不同的服务的。</p><p>这里的端口，并非指物理意义上的端口，而是特指TCP/IP协议中的端口，是逻辑意义上的端口。端口应用于网络参考模型中的传输层，端口号标识了计算机应用层中的各个进程，从而区分不同的服务。</p><h2 id="2-常见的端口号"><a href="#2-常见的端口号" class="headerlink" title="2.常见的端口号"></a>2.常见的端口号</h2><p>端口号是16位的，所以最多有2的16次方个端口，常见的端口号有以下几个：<br><img src="/2019/01/03/计算机基础知识/./013.png" alt="enter description here"></p><h2 id="3-查看端口"><a href="#3-查看端口" class="headerlink" title="3.查看端口"></a>3.查看端口</h2><p>打开计算机终端界面，输入netstat命令可以查看端口信息：<br>netstat -an<br>-a : 查看所有连接和监听端口<br>-n: 显示IP地址和端口号，而不显示域名和服务名</p><h1 id="八、TCP与UDP协议"><a href="#八、TCP与UDP协议" class="headerlink" title="八、TCP与UDP协议"></a><strong>八、TCP与UDP协议</strong></h1><p>传输层有两个重要的传输协议，它们分别是传输控制协议TCP，用户数据包协议UDP；</p><h2 id="1-TCP协议-Transmission-Control-Protocol"><a href="#1-TCP协议-Transmission-Control-Protocol" class="headerlink" title="1.TCP协议(Transmission Control Protocol)"></a>1.TCP协议(Transmission Control Protocol)</h2><p>TCP是一种面向连接的、可靠的、基于字节流的传输层通信协议；TCP包头的结构如下图：</p><p><img src="/2019/01/03/计算机基础知识/./014.png" alt="enter description here"></p><p>TCP协议的特点： </p><ul><li>TCP是面向连接的可靠的传输控制协议，建立连接需要三次握手，释放连接需要进行四次挥手。保证连接的建立，数据的同步传输。 </li><li>面向字节流，会把从上层传输下来的数据当作是无结构的字节流。 </li><li>只能一对一的通信。 </li><li>TCP在IP协议的基础之上添加了序号机制，确认机制，超时重传机制，数据校验，从而保证传输的可靠性，同时保证不出现丢失或者是乱序。</li></ul><h2 id="2-UDP协议"><a href="#2-UDP协议" class="headerlink" title="2.UDP协议"></a>2.UDP协议</h2><p>UDP是一种无连接的传输层协议，提供面向事务的简单不可靠信息传送服务。UDP包头的结构如下图：</p><p><img src="/2019/01/03/计算机基础知识/./015.png" alt="enter description here"></p><p>UDP协议的特点： </p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">* UDP是面向无连接的数据包服务，一方向另一方发送数据不需要建立连接。相当于发短信，别人是否收到，短信信息是否丢失都不能知道。 </span></span><br><span class="line"><span class="comment">* 面向报文，从上层接收的数据如果报文不大于传输限制，则直接加上首部传输，如果报文过大，则进行IP分片后，再分别加入首部进行传输。 </span></span><br><span class="line"><span class="comment">* UDP协议可以一对一通信，也可以一对多通信。 </span></span><br><span class="line"><span class="comment">* UDP仅仅是尽最大的努力进行交付，只是做比较初级的检查，比如端头检查，差错检测，往往在传输过程中会出现分组丢失、乱序、重复传输等问题。</span></span><br></pre></td></tr></table></figure><h1 id="九、DNS域名系统"><a href="#九、DNS域名系统" class="headerlink" title="九、DNS域名系统"></a><strong>九、DNS域名系统</strong></h1><p>互联网需要通过IP地址来进行通信，但是IP地址记忆困难，所以使用英文字符组合的域名来代替。比如：为了进入百度首页，我们可以在浏览器中输入IP地址:119.75.217.109，也可以直接输入域名:htpts://<a href="http://www.baidu.com；显然第二种方式更加方便和记忆。" target="_blank" rel="noopener">www.baidu.com；显然第二种方式更加方便和记忆。</a></p><p>但是，这需要我们建立域名与IP地址的相互映射关系，DNS(Domain Name System，域名系统)正是为了解决这一问题而存在。</p><h2 id="1-IP地址到主机名的映射有两种方式："><a href="#1-IP地址到主机名的映射有两种方式：" class="headerlink" title="1.IP地址到主机名的映射有两种方式："></a>1.IP地址到主机名的映射有两种方式：</h2><p>静态映射<br>其实，每台设备上都配置了域名到IP地址的映射，各设备独立维护自己的映射表，而且只供本设备使用；比如在windows电脑中，打开”window\system32\drivers\etc”路径下的hosts文件，其中就存在域名与IP地址的对应关系。</p><p>动态映射<br>建立一套域名解析系统，只在专门的DNS服务器上配置域名到IP地址的映射；网络上需要使用域名通信的设备，首先需要到DNS服务器查询域名所对应的IP地址。</p><p>本机静态映射文件的优先级高于DNS域名解析服务器；在访问网站的时，设备会首先在本机静态映射文件里查找对应关系，如果找不到才会使用DNS。但是静态映射不能包含大量的IP映射，而且域名维护也十分困难，所以只作为普通调试使用。</p><h2 id="2-DNS服务器的原理"><a href="#2-DNS服务器的原理" class="headerlink" title="2.DNS服务器的原理"></a>2.DNS服务器的原理</h2><p>下图展示了客户机通过域名，访问远程Web服务器的流程，具体的步骤如下：</p><p><img src="/2019/01/03/计算机基础知识/./016.png" alt="enter description here"></p><p>1客户机向DNS服务器发送域名查询请求；<br>2.DNS服务器告知客户机Web服务器的IP地址；<br>3.客户机使用DNS返回的IP地址，与Web服务器通信；</p><h2 id="3-域名空间结构-完全合格域名"><a href="#3-域名空间结构-完全合格域名" class="headerlink" title="3.域名空间结构(完全合格域名)"></a>3.域名空间结构(完全合格域名)</h2><p>通常 Internet 主机域名的一般结构为：主机名.三级域名.二级域名.顶级域名，如下图：</p><p><img src="/2019/01/03/计算机基础知识/./017.png" alt="enter description here"></p><p>顶级域名：由Internet网络协会进行登记和管理，它还为Internet的每一台主机分配唯一IP地址；顶级域分为组织域、国家地区域。<br><img src="/2019/01/03/计算机基础知识/./018.png" alt="enter description here"></p><p>二级域名：个人或者企业向域名分配组织申请得到<br>主机域名：常见的是www用于代表网页服务；<br>注意：”顶级域名.二级域名.三级域名”，三者通过“.”连接在一起后在全球唯一;</p><h2 id="4-DNS查询过程"><a href="#4-DNS查询过程" class="headerlink" title="4.DNS查询过程"></a>4.DNS查询过程</h2><p><img src="/2019/01/03/计算机基础知识/./019.png" alt="enter description here"></p><p>递归查询：<br>客户机向NDS服务器的查询是递归查询，即当客户机向DNS服务器发出请求后，若DNS服务器本身不能解析，则会向另外的DNS服务器发出请求，得到结果后转发给客户机；</p><p>迭代查询：<br>DNS服务器收到一次迭代查询结果回复一次结果，这个结果不一定是目标IP与域名的映射关系，也可以是其他DNS服务器的地址；</p><h1 id="十、网关-Gateway"><a href="#十、网关-Gateway" class="headerlink" title="十、网关(Gateway)"></a><strong>十、网关(Gateway)</strong></h1><p>“网关，又称网间连接器、协议转换器。网关在网络层以上实现网络互联，是最复杂的网络连接设备，仅用于两个高层协议不同的网络互联。网关既可以用于广域网互联，也可以用于局域网互联。” ——摘自百度</p><p>通俗的讲，网关其实就是一种充当转换重任的服务器或者路由器，通过下面的图会更加方便的理解：</p><p><img src="/2019/01/03/计算机基础知识/./020.png" alt="enter description here"></p><p>图中显示了我们在生活中常见的两种网络设备：交换机和路由器，总结它们的功能如下：<br>交换机：<br>1.使用交换机时，网线连接在交换机的端口上，交换机会自动记录了各个主机的MAC地址；<br>2.交换机识别MAC地址，但不识别IP，因为它在数据链路层，而不是网络层；<br>2.交换机只负责同一网段的通信；</p><p><strong>网关：</strong><br>1.网关是计算机硬件设备，一般是路由器，负责在不同的网段通信，也可以在服务器上模拟路由功能；<br>2.网关负责连接不同网段的局域网，在所有内网计算机访问的不是本网段的数据时使用；<br>3.网关负责将内网IP转化为公网Ip，或者将公网IP转化为内网IP;</p><p>下面是在Windows系统计算机上的一个网关配置示例：</p><p><img src="/2019/01/03/计算机基础知识/./021.png" alt="enter description here"></p><p>分析：如果不配置网关与DNS，当前计算机只能在局域网内通信，而不能连接互联网;<br>网关：网关负责将内网IP转化为公网Ip，或者将公网IP转化为内网IP;<br>DNS：将域名翻译为真正的IP地址；</p><p>**</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>**<br>本文只是概括性的总结了计算机网络的基本知识，为了更深层次的学习，仍需要再不断的学习和探索，继续加油！ ———————</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;计算机网络的知识与我们的生活息息相关，对于每一个开发者来说更是十分重要，深入理解它，将有助于我们在实际工作中迅速解决相关问题。本篇就计算机网络的基本知识进行概要性总结。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#一-计算机网络常识&quot;&gt;一、计算机网络常识&lt;/a&gt;&lt;ul&gt;

      
    
    </summary>
    
      <category term="硬件知识" scheme="http://yoursite.com/categories/%E7%A1%AC%E4%BB%B6%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="计算机,知识,永不言败" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA-%E7%9F%A5%E8%AF%86-%E6%B0%B8%E4%B8%8D%E8%A8%80%E8%B4%A5/"/>
    
  </entry>
  
  <entry>
    <title>在Hexo上发布文章</title>
    <link href="http://yoursite.com/2019/01/02/%E5%9C%A8Hexo%E4%B8%8A%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0/"/>
    <id>http://yoursite.com/2019/01/02/在Hexo上发布文章/</id>
    <published>2019-01-01T19:48:24.000Z</published>
    <updated>2019-01-01T19:49:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>终端cd到blog文件夹下，执行如下命令新建文章：<br>$ hexo new “postName”</p><p>名为postName.md的文件会建在目录/blog/source/_posts下，postName是文件名，为方便链接不建议掺杂汉字。我在用MacDown编辑器，支持预览。<br>注意：当你的博文写多了之后，在写新的文章的时候就要在_post里面来找到你新建的文章，比较麻烦，现在可以让你在用了命令 $ hexo new “postName”之后自动打开MacDown编辑器。方法如下：新建文章时自动打开编辑器</p><p>在blog文件夹下新建文件夹scripts.png</p><p>在scripts文件夹下新建js文件.png</p><p>文章编辑完成后，终端cd到blog文件夹下，执行如下命令来发布：<br>hexo generate //生成静态页面</p><p>hexo deploy //将文章部署到Github</p><p>安装theme<br>你可以到Hexo官网主题页去搜寻自己喜欢的theme。这里以hexo-theme-next为例：NexT主题使用<br>终端cd到blog目录下执行如下命令：<br>$ git clone <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">https://github.com/iissnan/hexo-theme-next</a> themes/next</p><p>将blog目录下_config.yml里theme的名称landscape修改为next<br>终端cd到blog目录下执行如下命令(每次部署文章的步骤)：<br>$ hexo clean //清除缓存文件 (db.json) 和已生成的静态文件 (public)<br>$ hexo g //生成缓存和静态文件<br>$ hexo d //重新部署到服务器</p><p>至于更改theme内容比如名称、描述、头像等去修改blog/_config.yml文件和blog/themes/next/_config.yml文件中对应的属性名称即可， 不要忘记冒号:后加空格。  NexT 使用文档里有极详细的介绍。<br>注意：Next主题常见问题、给博客添加文章阅读量统计功能、使用七牛云作为图床插入图片、备份Hexo博客源文件，再也不用担心换电脑、添加多说评论系统, Hexo使用多说教程</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;终端cd到blog文件夹下，执行如下命令新建文章：&lt;br&gt;$ hexo new “postName”&lt;/p&gt;
&lt;p&gt;名为postName.md的文件会建在目录/blog/source/_posts下，postName是文件名，为方便链接不建议掺杂汉字。我在用MacDown编
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/01/01/hello-world/"/>
    <id>http://yoursite.com/2019/01/01/hello-world/</id>
    <published>2019-01-01T14:56:55.000Z</published>
    <updated>2019-01-01T14:56:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br><span class="line">$ hexo generate</span><br><span class="line">$ hexo generate</span><br><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><h1 id="Font-settings-for-Headlines-h1-h2-h3-h4-h5-h6"><a href="#Font-settings-for-Headlines-h1-h2-h3-h4-h5-h6" class="headerlink" title="Font settings for Headlines (h1, h2, h3, h4, h5, h6)."></a>Font settings for Headlines (h1, h2, h3, h4, h5, h6).</h1><h1 id="Fallback-to-global-font-settings"><a href="#Fallback-to-global-font-settings" class="headerlink" title="Fallback to global font settings."></a>Fallback to <code>global</code> font settings.</h1><p>headings:<br>external: true<br>family: Roboto Slab<br>size:</p><h1 id="Font-settings-for-posts"><a href="#Font-settings-for-posts" class="headerlink" title="Font settings for posts."></a>Font settings for posts.</h1><h1 id="Fallback-to-global-font-settings-1"><a href="#Fallback-to-global-font-settings-1" class="headerlink" title="Fallback to global font settings."></a>Fallback to <code>global</code> font settings.</h1><p>posts:<br>external: true<br>family:</p><h1 id="Font-settings-for-Logo"><a href="#Font-settings-for-Logo" class="headerlink" title="Font settings for Logo."></a>Font settings for Logo.</h1><h1 id="Fallback-to-global-font-settings-2"><a href="#Fallback-to-global-font-settings-2" class="headerlink" title="Fallback to global font settings."></a>Fallback to <code>global</code> font settings.</h1><p>logo:<br>external: true<br>family: Lobster Two<br>size: 24</p><h1 id="Font-settings-for-and-code-blocks"><a href="#Font-settings-for-and-code-blocks" class="headerlink" title="Font settings for  and code blocks."></a>Font settings for <code> and code blocks.</code></h1><p>codes:<br>external: true<br>family: PT Mono<br>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>测试文章</title>
    <link href="http://yoursite.com/2017/01/01/%E2%80%99%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0%E2%80%98/"/>
    <id>http://yoursite.com/2017/01/01/’测试文章‘/</id>
    <published>2017-01-01T08:37:00.000Z</published>
    <updated>2019-01-01T12:16:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>一、前言<br>Hexo是一个快速、简洁且高效的博客框架，最近有搭建个人博客的想法，便动手尝试了。<br>二、初始化<br>1.安装Node.js<br>去Node.js官网下载相应的安装包，一路安装即可。<br>2.安装Git<br>Mac下安装Xcode就自带Git。<br>3.注册Github账号并新建仓库<br>注册过程就不多说了，注册完成之后需要新建一个仓库。需要注意的是新创建的仓库的名字，必须是username.github.io。例如我的username是BreadAwesome，那么新创建的仓库的名字便是BreadAwesome.github.io。<br>4.配置SSH Key<br>这一步不是必须的，配置SSH Key的话之后每次更新博客就不用都输入用户名和密码，可以方便一些。<br>以下是详细配置过程。<br>(1)检查本机上是否已经存在SSH Key<br>打开终端，输入如下命令<br>cd .ssh<br>ls -la</p><p>检查终端输出的文件列表中是否已经存在id_rsa.pub 或 id_dsa.pub 文件，如果文件已经存在，则直接进入第三步。<br>(2)创建一个SSH Key<br>在终端输入如下命令<br>ssh-keygen -t rsa -C “<a href="mailto:your_email@example.com" target="_blank" rel="noopener">your_email@example.com</a>“</p><p>按下回车，让你输入文件名，直接回车会创建使用默认文件名的文件(推荐使用默认文件名)，然后会提示你输入两次密码，可以为空。<br>(3)添加SSH Key到Github<br>如果你没有指定文件名（也就是使用的默认文件名），那么你的.ssh文件夹下，应该有一个id_rsa.pub文件了，打开该文件，复制里面的文本。然后登录Github，点击右上角头像右边的三角图标，点击Settings，然后在左边菜单栏点击SSH and GPG keys，点击New SSH key，Title 随便填一个，在Key栏填入你复制的内容，点击Add SSH key，就添加成功了。<br>(4)检验SSH Key是否配置成功<br>在终端输入如下命令<br>ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a></p><p>如果出现<br>Are you sure you want to continue connecting (yes/no)? </p><p>请输入yes再按回车。<br>如果最后出现<br>Hi username! You’ve successfully authenticated, but GitHub does not provide shell access.</p><p>就说明你的SSH Key配置成功了。<br>5.安装Hexo<br>前面我们已经安装了Node.js，这里我们使用npm命令来安装Hexo<br>npm install -g hexo</p><p>等待一会就会完成下载安装。<br>接着在任意位置创建一个文件夹，如Blog，cd到该路径下执行以下命令<br>hexo init</p><p>该命令会在目标文件夹内建立网站所需要的所有文件。接下来是安装依赖包<br>npm install</p><p>到这里本地博客就搭建好了。执行以下命令（在你博客的对应文件夹路径下）<br>hexo generate<br>hexo server</p><p>在浏览器输入<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 就可以进行查看了。<br>当然这个博客是本地的，别人是无法访问的，之后我们需要部署到GitHub上。<br>6.同步本地博客到Github<br>编辑自己创建的本地博客文件夹中的_config.yml中的deploy节点<br>deploy:<br>type: git<br>repo: <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:username/username.github.io.git<br>branch: master</p><p>注意：repo为这种形式的是配置了SSH Key之后的，如果没有配置则使用Https形式的地址。<br>为了能够使Hexo部署到GitHub上，需要安装一个插件<br>npm install hexo-deployer-git –save</p><p>然后输入以下命令<br>hexo clean<br>hexo generate<br>hexo deploy</p><p>在浏览器输入username.github.io就可以访问你的博客了。<br>三、配置主题<br>Hexo主题在Github上有很多，如</p><p><a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">https://github.com/iissnan/hexo-theme-next</a><br><a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">https://github.com/litten/hexo-theme-yilia</a><br><a href="https://github.com/viosey/hexo-theme-material" target="_blank" rel="noopener">https://github.com/viosey/hexo-theme-material</a><br><a href="https://github.com/LouisBarranqueiro/hexo-theme-tranquilpeak" target="_blank" rel="noopener">https://github.com/LouisBarranqueiro/hexo-theme-tranquilpeak</a><br><a href="https://github.com/pinggod/hexo-theme-apollo" target="_blank" rel="noopener">https://github.com/pinggod/hexo-theme-apollo</a><br><a href="https://github.com/ppoffice/hexo-theme-icarus" target="_blank" rel="noopener">https://github.com/ppoffice/hexo-theme-icarus</a></p><p>挑选自己喜欢的一款。当然，自己能够DIY也是极好的。<br>四、发布新文章<br>执行以下命令<br>hexo new post ‘文章标题’</p><p>这样会在本地博客的source-&gt;_posts路径下看到新建的文章，是md格式的，找一个markdown文本编辑器进行编辑即可。<br>编辑完成之后，与上面一样，执行以下命令<br>hexo clean<br>hexo generate<br>hexo deploy</p><p>即可更新到Github上。<br>五、绑定个人域名<br>如果你想拥有一个炫酷的域名，那就往下看吧<br>（1）购买域名<br>可以去万网买，也可以去其它地方。具体购买过程就不多讲了。<br>（2）配置DNS地址<br>这里以万网为例。<br>进入万网的管理控制台进行修改，修改DNS为DNSPod的免费DNS地址：f1g1ns1.dnspod.net 和 f1g1ns2.dnspod.net</p><p>(3)域名解析<br>注册一个DNSPod账号，登录之后把我们新注册的域名加进去，在域名解析界面添加3条记录<br>@          A             192.30.252.153<br>@          A             192.30.252.154<br>www      CNAME         username.github.io.</p><p>如图所示。</p><p>(4)添加CNAME文件<br>新建一个名为CNAME的文件，无后缀，内容为你的域名地址。<br>将该文件放入本地博客的source文件夹里面，并更新到Github。<br>到这里就绑定域名成功了。<br>最后晒上我的博客地址：<a href="http://breadawesome.me/" target="_blank" rel="noopener">http://breadawesome.me/</a><br>祝大家也早日拥有自己的博客~<br>参考链接</p><p><a href="http://www.jianshu.com/p/2cfa48c9c5eb" target="_blank" rel="noopener">http://www.jianshu.com/p/2cfa48c9c5eb</a><br><a href="http://www.jianshu.com/p/fb0b0258362f" target="_blank" rel="noopener">http://www.jianshu.com/p/fb0b0258362f</a><br><a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">https://github.com/litten/hexo-theme-yilia</a><br><a href="http://crazymilk.github.io/2015/12/28/GitHub-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2" target="_blank" rel="noopener">http://crazymilk.github.io/2015/12/28/GitHub-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2</a></p><p>作者：BreadAwesome<br>链接：<a href="https://www.jianshu.com/p/e5f95eb990ad" target="_blank" rel="noopener">https://www.jianshu.com/p/e5f95eb990ad</a><br>來源：简书<br>简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一、前言&lt;br&gt;Hexo是一个快速、简洁且高效的博客框架，最近有搭建个人博客的想法，便动手尝试了。&lt;br&gt;二、初始化&lt;br&gt;1.安装Node.js&lt;br&gt;去Node.js官网下载相应的安装包，一路安装即可。&lt;br&gt;2.安装Git&lt;br&gt;Mac下安装Xcode就自带Git。&lt;
      
    
    </summary>
    
    
      <category term="HEXO" scheme="http://yoursite.com/tags/HEXO/"/>
    
  </entry>
  
</feed>
